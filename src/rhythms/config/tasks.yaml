fetch_github_activity_task:
  description: >
    Collect and categorize recent GitHub activity by:
    1. Fetching concrete GitHub data from the last 24 hours using the github_activity tool
    2. Using the EXACT output from the tool in the response
    3. Do not modify or filter the data received from the tool
    4. Return the data in the same structure as received:
       - completed_work: List of completed activities with details
       - work_in_progress: List of in-progress activities with details
       - blockers: List of blocking issues with details
  expected_output: >
    The structured JSON output from the github_activity tool containing:
    - completed_work: [{detailed activity info with commit messages, PR details, etc.}]
    - work_in_progress: [{detailed activity info with PR and issue details}]
    - blockers: [{detailed blocker info with issue details}]
    Do not modify or summarize the tool output. Return it exactly as received.
  agent: github_activity_agent

fetch_linear_activity_task:
  description: >
    Collect and categorize recent Linear activity by:
    1. Fetching concrete Linear data from the last 24 hours
    2. Categorizing only verified activities:
       - Completed issues as completed work
       - In-progress issues as work in progress
       - Blocked or on-hold issues as blockers
    3. Including direct links to all referenced items
  expected_output: >
    A structured JSON containing only verified Linear activities:
    - completed_work: [{title, url, type, timestamp}]
    - work_in_progress: [{title, url, type, status, last_updated}]
    - blockers: [{title, url, type, reason}]
  agent: linear_activity_agent

draft_standup_update_task:
  description: >
    Create a structured standup draft using GitHub data, Linear data, and memory context by:
    1. Converting the GitHub and Linear activity JSON into a clear standup format
    2. If there are previous plans or blockers in memory, check their status
       and incorporate relevant updates into today's sections
    3. Using bullet points for each item with links
    4. Marking items that need user verification with [?]
    5. Not adding any speculative content
  expected_output: >
    A markdown-formatted draft with three main sections:
    - Accomplishments: Bullet points of completed work with links
    - Blockers: List of current blocking issues
    - Plans: List of in-progress work and new plans
    Each section should only contain items from GitHub data, Linear data, or memory
  agent: draft_agent

collect_user_update_task:
  description: >
    Validate and finalize the standup draft through focused user interaction, don't add any information that wasn't explicitly provided:
    1. Present the current draft clearly with three sections:
       - Accomplishments
       - Blockers
       - Plans
    2. Ask for feedback ONCE with a simple question: "Does this look complete?"
    3. Handle user response:
       - If user approves (says "looks good", "yes", etc.):
         * IMMEDIATELY return the exact draft with "FINAL STANDUP:" prefix
         * DO NOT ask any more questions
         * DO NOT modify the content
       - If user requests changes:
         * Update the draft with their changes
         * Ask for confirmation with updated draft
         * If approved, follow approval process above
    4. NEVER:
       - Ask multiple questions in one prompt
       - Continue interaction after user approval
       - Ask for specific updates unless user indicates changes needed
       - Add information not provided by the user
    5. Limit to max 2 interactions:
       - First interaction: Present draft and ask if complete
       - Second interaction (only if needed): Show updated draft and confirm

    Required tool usage:
    - Use get_slack_input for user interaction
    - Wait for response before proceeding
    - Return actual standup content when approved

    Interaction flow:
    1. get_slack_input("Does this look complete?") -> wait for response
    2. If approved -> return "FINAL STANDUP:" + exact draft
    3. If changes needed -> update, confirm, and follow step 2
  expected_output: >
    The output should be either:
    1. A call to get_slack_input with current draft and simple completion question
    2. If changes requested: A call to get_slack_input with updated draft
    3. The final standup (when approved) prefixed with "FINAL STANDUP:"
       containing the exact same draft content with three sections:
       - Accomplishments
       - Blockers
       - Plans
  agent: user_update_agent
